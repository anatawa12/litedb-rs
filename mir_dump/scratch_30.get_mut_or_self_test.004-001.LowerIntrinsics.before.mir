// MIR for `get_mut_or_self_test` before LowerIntrinsics

fn get_mut_or_self_test(_1: &mut HashMap<u32, ()>, _2: u32) -> Result<&mut (), &mut HashMap<u32, ()>> {
    debug this => _1;
    debug key => _2;
    let mut _0: std::result::Result<&mut (), &mut std::collections::HashMap<u32, ()>>;
    let mut _3: std::option::Option<&mut ()>;
    let mut _4: &mut std::collections::HashMap<u32, ()>;
    let mut _5: &u32;
    let _6: &u32;
    let mut _7: isize;
    let mut _9: &mut ();
    let mut _10: &mut std::collections::HashMap<u32, ()>;
    scope 1 {
        debug r => _8;
        let _8: &mut ();
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &mut (*_1);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &_2;
        _5 = &(*_6);
        _3 = HashMap::<u32, ()>::get_mut::<u32>(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_4);
        PlaceMention(_3);
        _7 = discriminant(_3);
        switchInt(move _7) -> [1: bb2, otherwise: bb3];
    }

    bb2: {
        StorageLive(_8);
        _8 = move ((_3 as Some).0: &mut ());
        StorageLive(_9);
        _9 = &mut (*_8);
        _0 = Result::<&mut (), &mut HashMap<u32, ()>>::Ok(move _9);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb4;
    }

    bb3: {
        StorageLive(_10);
        _10 = &mut (*_1);
        _0 = Result::<&mut (), &mut HashMap<u32, ()>>::Err(move _10);
        StorageDead(_10);
        goto -> bb4;
    }

    bb4: {
        StorageDead(_6);
        StorageDead(_3);
        return;
    }
}
