// MIR for `get_mut_or_self_test_3` before PromoteTemps

fn get_mut_or_self_test_3(_1: &mut HashMap<u32, ()>, _2: u32) -> Result<&mut (), &mut HashMap<u32, ()>> {
    debug this => _1;
    debug key => _2;
    let mut _0: std::result::Result<&mut (), &mut std::collections::HashMap<u32, ()>>;
    let mut _3: !;
    let mut _4: &mut std::collections::HashMap<u32, ()>;
    let _5: &mut ();
    let mut _6: std::option::Option<&mut ()>;
    let mut _7: &mut std::collections::HashMap<u32, ()>;
    let mut _8: &u32;
    let _9: &u32;
    let mut _10: isize;
    let mut _11: &mut ();
    scope 1 {
        debug r => _5;
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &mut (*_1);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &_2;
        _8 = &(*_9);
        _6 = HashMap::<u32, ()>::get_mut::<u32>(move _7, move _8) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        PlaceMention(_6);
        _10 = discriminant(_6);
        switchInt(move _10) -> [1: bb2, otherwise: bb4];
    }

    bb2: {
        falseEdge -> [real: bb3, imaginary: bb4];
    }

    bb3: {
        _5 = move ((_6 as Some).0: &mut ());
        StorageDead(_9);
        StorageDead(_6);
        StorageLive(_11);
        _11 = &mut (*_5);
        _0 = Result::<&mut (), &mut HashMap<u32, ()>>::Ok(move _11);
        StorageDead(_11);
        StorageDead(_5);
        goto -> bb5;
    }

    bb4: {
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_4);
        _4 = &mut (*_1);
        _0 = Result::<&mut (), &mut HashMap<u32, ()>>::Err(move _4);
        StorageDead(_4);
        goto -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        resume;
    }
}
