name: Publish

on:
  workflow_dispatch:
    inputs:
      release_kind:
        type: choice
        description: The type of release.
        default: prerelease
        required: true
        options:
          - prerelease
          - start-rc
          - stable

env:
  RELEASE_CHANGER: 'cargo'
  CRATE_NAME: vrc-get-litedb

jobs:
  pre-build:
    name: Update version name
    runs-on: ubuntu-latest
    outputs:
      version: ${{ env.VERSION }}
      prerelease: ${{ steps.update-version.outputs.prerelease }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: anatawa12/something-releaser@v3
      - uses: snow-actions/git-config-user@v1.0.0
      - uses: dtolnay/rust-toolchain@stable

      - name: Update Version Name
        id: update-version
        run: |
          # set version name in properties file
          case "$RELEASE_KIND_IN" in
            "prerelease" )
              get-version | version-next | set-version
              gh-export-variable PRERELEASE true
              gh-set-output prerelease true
              ;;
            "start-rc" )
              get-version | version-set-channel - rc 0 | set-version
              gh-export-variable PRERELEASE true
              gh-set-output prerelease true
              ;;
            "stable" )
              get-version | version-set-channel - stable | set-version
              gh-export-variable PRERELEASE false
              gh-set-output prerelease '' # empty string for false
              ;;
            * )
              echo "invalid release kind: $RELEASE_KIND_IN"
              exit 255
              ;;
          esac

          case "$GITHUB_REF_NAME" in
            master | master-* )
              echo "head is master or master-*"
              ;;
            * )
              echo "invalid release kind: $RELEASE_KIND_IN is not allowd for $GITHUB_REF_NAME"
              exit 255
              ;;
          esac

          gh-export-variable VERSION "$(get-version)"
        env:
          RELEASE_KIND_IN: ${{ github.event.inputs.release_kind }}

      # check for unexpected breaking ABI changes
      - name: Check semver
        uses: obi1kenobi/cargo-semver-checks-action@v2
        with:
          package: ${{ env.CRATE_NAME }}

      - name: commit new release
        id: commit
        run: |-
          # commit & tag
          git add Cargo.toml
          git commit -m "v$VERSION"
          git branch releasing
          git push -u origin releasing

  publish-crates-io:
    name: Publish to crates.io
    environment:
      name: crates.io
      url: https://crates.io/crates/${{ env.CRATE_NAME }}
    runs-on: ubuntu-latest
    needs: [pre-build]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: 'releasing'
          fetch-depth: 1
      - uses: dtolnay/rust-toolchain@stable

      - name: Publish CARGO
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }} 
        run: cargo publish --package "$CRATE_NAME"

  publish:
    name: Publish to GitHub
    environment:
      name: actions-github-app
      url: https://github.com/${{ github.repository }}/releases/v${{ needs.pre-build.outputs.version }}
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [publish-crates-io, pre-build]
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
      - uses: actions/checkout@v4
        with:
          ref: 'releasing'
          fetch-depth: 2
          token: ${{ steps.app-token.outputs.token }}

      # tools
      - uses: anatawa12/something-releaser@v3
      - uses: snow-actions/git-config-user@v1.0.0
      - uses: dtolnay/rust-toolchain@stable

      - name: Push tag
        env:
          VERSION: ${{ needs.pre-build.outputs.version }}
        run: |-
          # set tag and publish current version
          git tag "v$VERSION"
          git push && git push --tags
          # create master and push
          git switch -c master
          git fetch origin master --depth=1
          git log --all --graph
          git push -u origin master

      - name: create release
        shell: bash
        env:
          VERSION: ${{ needs.pre-build.outputs.version }}
          GH_TOKEN: ${{ github.token }}
        run: |-
          sleep 1
          gh release create --verify-tag "v$VERSION"

      - name: Update To Next Version
        if: ${{ !needs.pre-build.outputs.prerelease }}
        run: |
          get-version | version-next | version-set-channel - beta 0 | set-version
          git add Cargo.toml
          NEXT_VERSION="$(get-version | version-stable)"
          git commit -m "prepare for next version: $NEXT_VERSION"
          git push
          git push --delete origin releasing
